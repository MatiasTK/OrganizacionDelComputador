     1                                  ;***************************************************************************
     2                                  ; vector.asm
     3                                  ; Ejercicio que llena un vector ingresando datos por telcado y luego imprime
     4                                  ; Objetivos
     5                                  ;	- definir un vector con times y resb
     6                                  ;	- manejar un vector usando formula (i-1)*longElem
     7                                  ;	- usar printf con varios parametros de distinto tipo
     8                                  ;
     9                                  ;***************************************************************************
    10                                  global 	main
    11                                  extern 	printf
    12                                  
    13                                  section	.data
    14 00000000 456C656D656E746F73-     	msgSal			db	'Elementos guardados en posicion %i: %i y %s',10,13,0
    14 00000009 20677561726461646F-
    14 00000012 7320656E20706F7369-
    14 0000001B 63696F6E2025693A20-
    14 00000024 256920792025730A0D-
    14 0000002D 00                 
    15                                  
    16 0000002E 5A756C656D61202020-     	vecNom			db "Zulema   ",0,"Elvira   ",0,"Filomena ",0,"Leonor   ",0,"Asunta   ",0
    16 00000037 00456C766972612020-
    16 00000040 200046696C6F6D656E-
    16 00000049 6120004C656F6E6F72-
    16 00000052 202020004173756E74-
    16 0000005B 6120202000         
    17 00000060 640038FFFF7F2800BB-     	vecNum			dw	100,-200,32767,40,1979
    17 00000069 07                 
    18                                  	
    19 0000006A 0500000000000000        	posicion		dq	5
    20                                  
    21                                  section	.text
    22                                  main:
    23 00000000 4883EC08                	sub  rsp,8
    24                                  
    25 00000004 488B0C25[6A000000]      	mov		rcx,[posicion]	;rcx = posicion
    26 0000000C 48FFC9                  	dec		rcx							;(posicion-1)
    27 0000000F 6BD902                  	imul	ebx,ecx,2				;(posicion-1)*longElem
    28                                  
    29 00000012 66678B83[60000000]      	mov		ax,[vecNum+ebx]	;ax = elemento (2 bytes / word)
    30 0000001A 98                      	cwde									;eax= elemento (4 bytes / doble word)
    31 0000001B 4898                    	cdqe									;rax= elemento (8 bytes / quad word)
    32                                  
    33 0000001D 6BD90A                  	imul	ebx,ecx,10			;(posicion-1)*longElem
    34                                  
    35 00000020 48BF-                   	mov		rdi,msgSal			;Param 1: Direccion del mensaje a imprimir
    35 00000022 [0000000000000000] 
    36 0000002A 488B3425[6A000000]      	mov		rsi,[posicion]	;Param 2: Direccion del primer dato a imprimir (numero)
    37 00000032 4889C2                  	mov		rdx,rax					;Param 3: Contenido del segundo dato a imprimir (numero)
    38 00000035 67488D8B[2E000000]      	lea		rcx,[vecNom+ebx];Param 4: Direccion del tercer dato a imprimir (string)
    39 0000003D E8(00000000)            	call	printf
    40                                  fin:
    41 00000042 4883C408                	add  rsp,8
    42 00000046 C3                      	ret
