     1                                  ; Ingresar por teclado un texto y luego un caracter e imprimir por pantalla:
     2                                  ; - El texto de forma invertida
     3                                  ; - La cantidad de apariciones del caracter en el texto
     4                                  ; - El porcentaje de esas apariciones respecto de la longitud total del texto
     5                                  
     6                                  %macro mPuts 0
     7                                     sub rsp,8
     8                                     call puts
     9                                     add rsp,8
    10                                  %endMacro
    11                                  
    12                                  %macro mGets 0
    13                                      sub rsp,8
    14                                      call gets
    15                                      add rsp,8
    16                                  %endMacro
    17                                  
    18                                  %macro mPrintf 0
    19                                      sub rsp,8
    20                                      call printf
    21                                      add rsp,8
    22                                  %endMacro
    23                                  
    24                                  global main
    25                                  extern puts
    26                                  extern gets; Funcion insegura, hay que tener cuidado con el buffer overflow.
    27                                  extern printf
    28                                  
    29                                  section .data
    30 00000000 496E67726573652075-         msgInText db "Ingrese un texto por teclado (Maximo 99 caracteres): ",0
    30 00000009 6E20746578746F2070-
    30 00000012 6F72207465636C6164-
    30 0000001B 6F20284D6178696D6F-
    30 00000024 203939206361726163-
    30 0000002D 7465726573293A2000 
    31 00000036 696E67726573652075-         msgInChar db "ingrese un caracter: ",0
    31 0000003F 6E2063617261637465-
    31 00000048 723A2000           
    32 0000004C 0000000000000000            textLength dq 0; Quad word
    33 00000054 0000000000000000            counterChar dq 0
    34 0000005C 546578746F20696E76-         msgReversedText db "Texto invertido %s",10,0; El 10 es el salto de linea.
    34 00000065 65727469646F202573-
    34 0000006E 0A00               
    35                                  
    36                                  section .bss
    37 00000000 <res 1F4h>                  text resb 500
    38 000001F4 <res 32h>                   char resb 50
    39 00000226 <res 1F4h>                  reversedText resb 500
    40                                  
    41                                  section .text
    42                                  main:
    43 00000000 48BF-                       mov rdi,msgInText; Se mueve la direccion de memoria del mensaje a imprimir a rdi
    43 00000002 [0000000000000000] 
    44                                      mPuts
     7 0000000A 4883EC08            <1>  sub rsp,8
     8 0000000E E8(00000000)        <1>  call puts
     9 00000013 4883C408            <1>  add rsp,8
    45                                  
    46 00000017 48BF-                       mov rdi, text
    46 00000019 [0000000000000000] 
    47                                      mGets
    13 00000021 4883EC08            <1>  sub rsp,8
    14 00000025 E8(00000000)        <1>  call gets
    15 0000002A 4883C408            <1>  add rsp,8
    48                                  
    49 0000002E 48BF-                       mov rdi, msgInChar
    49 00000030 [3600000000000000] 
    50                                      mPuts
     7 00000038 4883EC08            <1>  sub rsp,8
     8 0000003C E8(00000000)        <1>  call puts
     9 00000041 4883C408            <1>  add rsp,8
    51                                  
    52 00000045 48BF-                       mov rdi, char
    52 00000047 [F401000000000000] 
    53                                      mGets
    13 0000004F 4883EC08            <1>  sub rsp,8
    14 00000053 E8(00000000)        <1>  call gets
    15 00000058 4883C408            <1>  add rsp,8
    54                                  
    55                                      ; Voy a invertir el texto
    56 0000005C BE00000000                  mov rsi,0; Puntero hacia caracteres
    57                                  nextCharFindLast:
    58 00000061 80BE[00000000]00            cmp byte[text + rsi], 0; Es el fin de string?
    59 00000068 7405                        je  endString
    60 0000006A 48FFC6                      inc rsi; Incremento el puntero
    61 0000006D EBF2                        jmp nextCharFindLast; Bifurcacion incondicional
    62                                  endString:
    63 0000006F BF00000000                  mov rdi,0; Inicializo el puntero para que apunte al primer caracter de reversedText
    64 00000074 48893425[4C000000]          mov [textLength], rsi; Guardo la longitud del texto
    65                                  charCopy:
    66 0000007C 4883FE00                    cmp rsi,0; Si llegue al inicio del texto termine
    67 00000080 7426                        je endCopy
    68                                      ; Para hacer una copia necesito un registro como pivote
    69 00000082 8A86[FFFFFFFF]              mov al, [text + rsi - 1]; al: 8 bits
    70 00000088 8887[26020000]              mov [reversedText + rdi], al; Copio el char a la siguiente pos de reservedText
    71                                      ;Me fijo si lo que esta en al es el char a contar
    72 0000008E 3A0425[F4010000]            cmp al, [char]
    73 00000095 7509                        jne movePointers
    74 00000097 48830425[54000000]-         add qword[counterChar],1
    74 0000009F 01                 
    75                                  movePointers:
    76 000000A0 48FFC7                      inc rdi
    77 000000A3 48FFCE                      dec rsi
    78 000000A6 EBD4                        jmp charCopy
    79                                  endCopy:
    80 000000A8 C687[26020000]00            mov byte[reversedText + rdi], 0; Agrego el caracter nulo al final del string
    81                                      ;Imprimo texto invertido
    82 000000AF 48BF-                       mov rdi, msgReversedText
    82 000000B1 [5C00000000000000] 
    83 000000B9 48BE-                       mov rsi, reversedText
    83 000000BB [2602000000000000] 
    84                                      mPrintf
    19 000000C3 4883EC08            <1>  sub rsp,8
    20 000000C7 E8(00000000)        <1>  call printf
    21 000000CC 4883C408            <1>  add rsp,8
    85 000000D0 C3                          ret
